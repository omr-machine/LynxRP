// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSComposeTriangles           // 0
#pragma kernel CSVote                       // 1
#pragma kernel CSPrepareIndirectTriangles   // 2
#pragma kernel CSPrepareIndirectPoints      // 3
#pragma kernel CSClearDebugTexture          // 4

// #pragma enable_d3d11_debug_symbols

#include "../../../ShaderLibrary/Compute/CSCommon.hlsl"
#include "../../../ShaderLibrary/BoundingShapes.hlsl"
#include "../../../ShaderLibrary/Primitives.hlsl"
#include "../../../ShaderLibrary/SpaceTransformations.hlsl"
#include "../../../ShaderLibrary/Culling//CullTests.hlsl"
#include "CSCullInput.hlsl"
#include "CSCullTests.hlsl"
#include "CSCullDraw.hlsl"

[numthreads(NumThreadsXMax,1,1)]
void CSComposeTriangles (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _IndexSize)
    {
        return;
    }
    
    uint triIndexStart = id.x * VerticesInTri;
    Vertex vertices[3];
    
    UNITY_UNROLL // [unroll]
    for (uint i = 0; i < VerticesInTri; i++)
    {
        Vertex vertex;
        vertex.position = _IndexBuffer[triIndexStart + i].position;
        vertex.normal = _IndexBuffer[triIndexStart + i].normal;
        vertex.color = _IndexBuffer[triIndexStart + i].color;
        vertex.baseUV = _IndexBuffer[triIndexStart + i].baseUV;
        vertices[i] = vertex;
    }
    
    Triangle singleTriangle;
    singleTriangle.v1 = vertices[0];
    singleTriangle.v2 = vertices[1];
    singleTriangle.v3 = vertices[2];
    
    _TriangleBuffer[id.x] = singleTriangle;
}

[numthreads(NumThreadsXMax,1,1)]
void CSVote (uint3 id : SV_DispatchThreadID)
{
    float3 positions[3];
    positions[0] = _TriangleBuffer[id.x].v1.position;
    positions[1] = _TriangleBuffer[id.x].v2.position;
    positions[2] = _TriangleBuffer[id.x].v3.position;
    
    uint triCull = id.x >= _IndexSize;
    if (triCull == 0)
    {
        if (_VoteBuffer[id.x] == 1)
        {
            triCull = CullTests(id.x, positions);
        }
    }
    
    _VoteBuffer[id.x] = !triCull;
}

groupshared uint interLockIndex;
groupshared uint interLockIndexLine;
[numthreads(NumThreadsXMax,1,1)]
void CSPrepareIndirectTriangles (uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0)
    {
        interLockIndex = 0; interLockIndexLine = 0;
    }
    
    if (id.x >= _IndexSize)
    {
        return;
    }

    uint culled = 1 - _VoteBuffer[id.x];
    DrawLine(_BBoxBuffer[id.x], culled);
    
    if (culled)
    {
        // return;
    }
    DrawTriangle(_TriangleBuffer[id.x], culled);
}

groupshared uint interLockIndexQuad;
[numthreads(NumThreadsXMax,1,1)]
void CSPrepareIndirectPoints (uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0)
    {
        interLockIndexQuad = 0;
    }

    if (id.x >= _IndexSize * 3)
    {
        return;
    }

    DrawPoint();
}

[numthreads(16,16,1)]
void CSClearDebugTexture(uint3 id : SV_DispatchThreadID)
{
    _CullDebugTexture[id.xy] = float4(0,0,0,0);
}

// [numthreads(1,1,1)]
// void CSDebugBox(uint3 id : SV_DispatchThreadID)
// {
//     uint index;
//     InterlockedAdd(_ArgsBuffer[0], 1 * VerticesInTri, index);
//     _VertexPassBuffer[index] = vertices[0];
//     _VertexPassBuffer[index + 1] = vertices[1];
//     _VertexPassBuffer[index + 2] = vertices[2];
// }